class CircularQueue {
   constructor(size) {

     this.queue = [];
     this.read = 0;
     this.write = 0;
     this.max = size - 1;

     while (size > 0) {
        this.queue.push(null);
        size--;
     }
   }

   print() {
     return this.queue;
   }

   enqueue(item) {
    // Only change code below this line
    // make sure we can write to the current write location.
    if (this.queue[this.write] == null) {
      // Write the item, and advance the write pointer
      this.queue[this.write] = item;
      this.write += 1;

      // Advance back to 0 if we are at the end
      if (this.write > this.max) {
        this.write = 0;
      }
      
      // Return the item
      return item;
    }

    // Return null
    return null;    // Only change code above this line
   }

   dequeue() {
    // Only change code below this line
    if (this.queue[this.read] != null) {
      //  Get the item to read/dequeue
      let item = this.queue[this.read];
      // Set the item to null
      this.queue[this.read] = null;
      // Advance the pointer
      this.read += 1;
      // Reset back to zero if we are at the end
      if (this.read > this.max) {
        this.read = 0;
      }
      // Return the item
      return item;
    }
    return null;
    // Only change code above this line
   }
}
